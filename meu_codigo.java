// Classe representando o sistema antigo, que recebe um clienteId num√©rico e um hor√°rio
class SistemaAntigo {
    public void agendarHorario(int clienteId, String horario) {
        System.out.println("‚úÖ Agendamento realizado para o cliente " + clienteId + " no hor√°rio " + horario);
        System.out.flush(); // Garante que a sa√≠da seja exibida no console
    }
}

// Interface representando o novo sistema, que aceita um identificador de cliente como String
interface SistemaNovo {
    void agendarServico(String cliente, String dataHora);
}

// Classe Adaptadora que converte os dados para permitir a compatibilidade entre os sistemas
class SistemaAdaptador implements SistemaNovo {
    private SistemaAntigo sistemaAntigo;

    // Construtor que recebe a inst√¢ncia do sistema antigo
    public SistemaAdaptador(SistemaAntigo sistemaAntigo) {
        this.sistemaAntigo = sistemaAntigo;
    }

    // M√©todo do novo sistema que precisa ser adaptado para chamar o sistema antigo
    @Override
    public void agendarServico(String cliente, String dataHora) {
        try {
            // Convers√£o do identificador de cliente de String para int
            int clienteId = Integer.parseInt(cliente);
            // Chamando o m√©todo do sistema antigo com os dados convertidos
            sistemaAntigo.agendarHorario(clienteId, dataHora);
        } catch (NumberFormatException e) {
            // Tratamento de erro caso o identificador n√£o seja num√©rico
            System.out.println("‚ùå Erro: O identificador do cliente deve ser num√©rico.");
            System.out.flush();
        }
    }
}

// Classe principal para testar o adaptador
public class Main {
    public static void main(String[] args) throws InterruptedException {
        // Criando uma inst√¢ncia do sistema antigo
        SistemaAntigo sistemaAntigo = new SistemaAntigo();

        // Criando um adaptador que permite que o novo sistema se comunique com o antigo
        SistemaNovo sistemaNovo = new SistemaAdaptador(sistemaAntigo);

        // Testando com um cliente v√°lido (num√©rico)
        System.out.println("üîπ Teste 1: Cliente v√°lido");
        sistemaNovo.agendarServico("123", "10:30");

        // Testando com um cliente inv√°lido (n√£o num√©rico)
        System.out.println("\nüîπ Teste 2: Cliente inv√°lido");
        sistemaNovo.agendarServico("ABC", "11:00");

        // Espera 2 segundos para garantir que o JVDroid exiba a sa√≠da antes de fechar
        Thread.sleep(2000);
    }
}
